#include  <stdio.h>
#include  <stdlib.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>
#define N 10000 // Girilecek metnin maksimum eleman sayısıdır.

void detect_lang(float x[]); // Frekanslar üzerindeki işlemlerinden ardından 
//calculate_distances fonksiyonundan aldığı değerlere göre dilin hangi dil olduğunu ekrana yazar.
void calculate_distances(float *arr,int y);// Girilen metnin frekansları hesaplandıktan sonra bu fonksiyon tarafından çağrılır.  
// Frekanslar arasında işlemler yapar.                                         
void calculate_frequencies_bi(char x[],float *arr);//Girilen metinde matrix_bigram_strings dizisindeki elemanların frekansını hesaplar.
void calculate_frequencies_tri(char x[],float *arr);//Girilen metinde matrix_trigram_strings dizisindeki elemanların frekansını hesaplar.
void filter_str(char *x);//Ana fonksiyondan metni çağırarak harfler ve boşluk haricindeki karakterleri filtreler.                   

void detect_lang(float x[]){//calculate_distances fonksiyonundan distances dizisini çağırır. distances dizisinin sıfırıncı indisi ingilizcenin birinci indisi almancanın
// toplam frekansını tutar.
if(x[0]<x[1])
printf("Ingilizce\n");
else
printf("Almanca");

}

  void calculate_distances(float *arr,int y){
  float a=0.0;
  float b=0.0;
  float distances[2]={0,0};
  const float frequency_eng[20]={ 2.71, 2.33, 2.03, 1.78, 1.61, 1.13, 0.01, 0.01, 0.01, 0.01, 1.81, 0.73, 0.72, 0.42, 0.42, 0.01, 0.01, 0.01, 0.01, 0.01 };
  const float frequency_germ[20]={ 0.01, 0.89, 1.71, 3.90, 1.07, 3.61, 2.36, 2.31, 1.98, 1.98, 0.01, 0.01, 0.01, 0.01, 0.01, 1.04, 0.76, 0.75, 0.72, 0.62 };
  int i;
  for(int i=0;i<y;i++){
  a+=pow(frequency_eng[i]-*(arr+i),2);}//Girilen metnin bigramlari ve trigramlari
  // hesaplanıp frequencies dizisine atandıktan sonra frequencies dizisi elemanları ile  frequency_eng dizisi
  //elemanları arasındaki oklid uzaklığı sırasıyla elemanlar arasındaki farklar alınıp sonrasında kareleri alınıp 
  //toplanarak a degiskenine atanir.
  distances[0]=sqrt(a);//Sırasıyla elemanlar arasındaki farklar alınıp sonrasında kareleri alınıp 
  //toplandiginda geriye tek kalan toplamın kökünü alıp distances dizisinin 0.indisine atamak.
  printf("\n\nIngilizce frekans:%f\n\n",distances[0]);
 
  for(int i=0;i<y;i++){
  b+=pow(frequency_germ[i]-*(arr+i),2);}//Girilen metnin bigramlari ve trigramlari
  // hesaplanıp frequencies dizisine atandıktan sonra frequencies dizisi elemanları ile  frequency_eng dizisi 
  //elemanları arasındaki oklid uzaklığı sırasıyla elemanlar arasındaki farklar alınıp sonrasında kareleri alınıp 
  //toplanarak a değişkenine atanır.

  distances[1]=sqrt(b);//Sırasıyla elemanlar arasındaki farklar alınıp sonrasında kareleri alınıp 
  //toplandığında geriye tek kalan toplamın kökünü alıp distances dizisinin 1.indisine atamak.
  printf("\n\nAlmanca frekans:%f\n\n",distances[1]);

  detect_lang(distances);
  }
  
  void calculate_frequencies_bi(char x[],float *arr){
  int c=0;
  printf("\n\nmatrix_bigram_strings dizisi frekansları:\n\n");
  int sayac=0;//Döngü yardımıyla matrix_bigram_strings dizisindeki her bir elemanın metindeki toplam sayısını tutacak olan değişken.
  // Normal olarak her döngü başladığında sayac değeri sıfırlanır.
  const char matrix_bigram_strings[10][3] ={"th", "he", "in", "er", "an", "en", "ch", "de", "ei", "te"};
  for(int i=0;i<10;i++){
  int sayac=0;
  for(int k=0;k<strlen(x);k++){//Bu döngüde girilen metindeki elemanların artarda gelen ikili kombinasyonu  
  //matrix_bigram_strings dizisinin elemanları karşılaştırılır.
  if (x[k]==matrix_bigram_strings[i][c] && x[k+1]==matrix_bigram_strings[i][c+1])        
  sayac++;}////Her karşılaştırma sonucu doğru ise  sayac değişkeni iç döngü boyunca bir artırılır.                 
  *(arr+i)=sayac*100.0/(strlen(x));// Örnek olarak matrix_bigram_strings dizisindeki 
  //toplam ‘th’ sayısı bulunduktan sonra yüzdesi hesaplanır ve frequencies dizisinin adresini tutan *arr 'nin ilgili indisine atanır.

  }
  for(int i=0;i<10;i++){
  printf("%f\n",*(arr+i));}
  }

  void calculate_frequencies_tri(char x[],float *arr){
  int c=0;
  printf("\n\nmatrix_trigram_strings dizisi frekansları:\n\n");
  int sayac=0;//Döngü yardımıyla matrix_trigram_strings dizisindeki her bir elemanın metindeki toplam sayısını tutacak olan değişken.
  // Normal olarak her döngü başladığında   sayac değeri sıfırlanır.
  char matrix_trigram_strings[10][4]={"the", "and", "ing", "ent", "ion", "der", "sch", "ich", "nde", "die"};
  for(int i=0;i<10;i++){
  int sayac=0;
  for(int k=0;k<strlen(x);k++){//Bu döngüde girilen metindeki elemanların artarda gelen üçlü kombinasyonu  
  //matrix_bigram_strings dizisinin elemanları karşılaştırılır.
     if (x[k]==matrix_trigram_strings[i][c] && x[k+1]==matrix_trigram_strings[i][c+1] && x[k+2]==matrix_trigram_strings[i][c+2])        
       sayac++;//Her karşılaştırma sonucu doğru ise  sayac değişkeni iç döngü boyunca bir artırılır.                 

     }               
     
       *(arr+i+10)=sayac*100.0/(strlen(x));// Örnek olarak matrix_trigram_strings dizisindeki 
  // toplam ‘the’ sayısı bulunduktan sonra yüzdesi hesaplanır ve frequencies dizisinin adresini tutan *arr 'nin ilgili indisine atanır.

}
 for(int i=0;i<10;i++){
 printf("%f\n",*(arr+10+i));}

}
    
  

   int main(){
 const  char metin[N];//Girilecek metnin elemanlarını tutacak dizi.
 float frequencies[20];//Metindeki matrix_trigram_strings ve   matrix_bigram_strings       
 // dizisindeki elemanların frekans degerini atayacağımız dizi.
 printf("Metni giriniz: \n");
 gets(metin);
 filter_str(metin);//Metin boşluk ve harfler dışındaki diğer karakterlerin filtrelenmesi
 //icin fonksiyona gonderilir.
 calculate_frequencies_bi(metin,frequencies);//metin dizisindeki elemanların artarda gelen ikili kombinasyonların ile
 //matrix_bigram_strings dizisindeki elemanların karşılaştırılması ve oluşacak değerlerin frequencies 
 // dizisine atanması  için fonsiyon çağrılır.
 calculate_frequencies_tri(metin,frequencies);//metin dizisindeki elemanların artarda gelen üçlü kombinasyonların ile
 //matrix_trigram_strings dizisindeki elemanların karşılaştırılması ve oluşacak değerlerin frequencies 
 // dizisine atanması  için fonsiyon çağrılır.
 calculate_distances(frequencies,20);//Girilen metinde frekanslar hesaplandıktan sonra matrix_bigram_strings ve matrix_trigram_strings dizi 
 //elemanlarının metinde bulduğumuz ile normal frekans değerleri arasında oklid  teoremi kullanarak uzaklık hesabının yapılması için
 // bu fonksiyon tarafından çağrılma işlemi gerçekleştirilir.
  return 0;
 }  
 void filter_str(char *x){
 for(int i=0;i<strlen(x);i++){//Harf ve boşluk karakterlerini filtrelemek için bu karakterlerin yerine boşluk karakteri diziye eklenir.
 if(!(x[i]>=65 && x[i]<=99 || x[i]>=97 && x[i]<=122 || x[i]==32)){     
    *(x+i)=32;}
}
 
  
}
